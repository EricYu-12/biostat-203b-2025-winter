---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: Zhiyuan Yu 906405523
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(readr)
library(dplyr)
library(ggplot2)
library(DescTools)
library(data.table)
library(rlang)
```

Display your machine memory.

```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible. 

**Solution:** 
Step 1: Load in required datasets
```{r}
#| eval: false
patients <- read_csv("~/mimic/hosp/patients.csv.gz")
admissions <- read_csv("~/mimic/hosp/admissions.csv.gz")
transfers <- read_csv("~/mimic/hosp/transfers.csv.gz")
labevents_data <- arrow::open_dataset("~/mimic/hosp/labevents.csv", 
                                      format = "csv")
arrow::write_dataset(labevents_data, path = "labevents_pq", format = "parquet")
dataset_parquet <- arrow::open_dataset ("labevents_pq", format = "parquet")
procedures_icd <- read_csv("~/mimic/hosp/procedures_icd.csv.gz")
diagnoses_icd <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz")
d_icd_procedures <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz")
d_icd_diagnoses <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz")
```

Step 2: Take a peek of the composition of the data
```{bash}
#| eval: false
zcat < ~/mimic/hosp/patients.csv.gz | head
zcat < ~/mimic/hosp/admissions.csv.gz | head
zcat < ~/mimic/hosp/transfers.csv.gz | head
zcat < ~/mimic/hosp/labevents.csv.gz | head
zcat < ~/mimic/hosp/procedures_icd.csv.gz | head
zcat < ~/mimic/hosp/diagnoses_icd.csv.gz | head
zcat < ~/mimic/hosp/d_icd_procedures.csv.gz | head
zcat < ~/mimic/hosp/d_icd_diagnoses.csv.gz | head 
```

Step 3: Get the required information for patient 10063848
```{r}
subject_id <- 10063848

# Get race info
race <- read_csv("~/mimic/hosp/admissions.csv.gz") %>%
  filter(subject_id == !!subject_id) %>%
  distinct(race)

# Get demographic info
demographics <- read_csv("~/mimic/hosp/patients.csv.gz") %>%
  filter(subject_id == !!subject_id) %>%
  mutate(race = tolower(race$race))  

# Get top 3 diagnoses info
top_3_diagnoses <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz") %>%
  filter(subject_id == !!subject_id) %>%
  left_join(read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz"), 
            by = c("icd_code" = "icd_code", "icd_version" = "icd_version")) %>%
  group_by(long_title) %>% 
  summarise(freq = n()) %>% 
  arrange(desc(freq)) %>% 
  slice(1:3) 

# Get ADT info
ADT <- read_csv("~/mimic/hosp/transfers.csv.gz") %>%
  filter(subject_id == !!subject_id) %>%
  filter(!is.na(careunit)) %>%
  filter(!is.na(intime) & !is.na(outtime)) %>% 
  mutate(segment_thickness = if_else(str_detect(careunit, "Care Unit"), 10, 8))

# Get lab events info
labevents <- arrow::open_dataset('./labevents_pq', format = "parquet") %>%
  dplyr::select(subject_id, charttime) %>%
  dplyr::filter(subject_id == !!subject_id) %>%
  dplyr::distinct(subject_id, charttime) %>%
  collect()

# Get procedures info
procedures <- read_csv("~/mimic/hosp/procedures_icd.csv.gz") %>%
  filter(subject_id == !!subject_id) %>%
  left_join(read_csv("~/mimic/hosp/d_icd_procedures.csv.gz"), 
            by = c("icd_code" = "icd_code", "icd_version" = "icd_version"))

```

Step 4: Make the required plot
```{r}
# Create the ADT history plot
ADT_history <- ggplot() +
  
  # Specify x-axis limits dynamically
  scale_x_datetime(name = "Calendar Time", 
                   limits = c(min(ADT$intime) - days(1), max(ADT$outtime))) +
  
  # Specify y-axis with 3 levels
  scale_y_discrete(name = NULL, 
                   limits = c("Procedure", "Lab", "ADT")) + 
  
  # Add procedure events
  geom_point(data = procedures, 
             aes(x = as.POSIXct(chartdate), 
                 y = "Procedure", 
                 shape = sub(",.*", "", long_title)), 
             size = 3, color = "black") + 
  
  scale_shape_manual(values = c(1:n_distinct(procedures$long_title))) +
  
  # Add lab events
  geom_point(data = labevents, 
             aes(x = charttime, y = "Lab"), 
             shape = 3, size = 2, color = "black") +
  
  # Add ADT events
  geom_segment(data = ADT, 
               aes(x = intime, 
                   xend = outtime, 
                   y = "ADT", 
                   yend = "ADT", 
                   color = careunit, 
                   )) +  
  
  # Set legend position and arrangement
  theme_bw() +
  theme(legend.position = "bottom", 
        legend.box = "vertical", 
        legend.key.size = unit(0, "pt"),
        legend.text = element_text(size = 7)) +
  
  # Set legend titles and arrangement
  guides(color = guide_legend(title = "Care Unit", 
                              ncol = 3,
                              keywidth = 1),
         shape = guide_legend(title = "Procedure", 
                              ncol = 2),
         size = "none") +  
  
  # Add patient information as title and subtitle
  labs(title = paste("Patient", demographics$subject_id[1], ", ",
                     demographics$gender[1], ", ",
                     demographics$anchor_age[1], "years old, ",
                     demographics$race[1]),
       subtitle = paste(top_3_diagnoses$long_title[1],
                        top_3_diagnoses$long_title[2],
                        top_3_diagnoses$long_title[3],
                        sep = "\n"))

print(ADT_history)
```
### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`. 

**Solution:**
Step 1: decompress chartevents.csv.gz
```{bash}
#| eval: false
gzip -d -k ~/mimic/icu/chartevents.csv.gz
```

Step 2: prepare the data
```{r}
target_id <- 10063848

# Read d_items.csv.gz to get vital sign labels
items <- read_csv("~/mimic/icu/d_items.csv.gz") %>%
  dplyr::select(itemid, label, abbreviation) %>%
  dplyr::filter(abbreviation %in% c("HR", "NBPd", "NBPs", "RR", 
                                    "Temperature F"))

chartevents_data <- arrow::open_dataset("~/mimic/icu/chartevents.csv", 
                                        format = "csv")

chart_tibble <- chartevents_data %>%
  filter(subject_id == target_id,  
         itemid %in% c(220045, 220180, 220179, 223761, 220210)) %>%
  select(subject_id, stay_id, itemid, charttime, valuenum) %>%
  collect()  

# Merge with items to get vital sign labels
chart_tibble <- chart_tibble %>%
  left_join(items, by = "itemid")
```
Step 4: plot the plots
```{r}
vitals_line_plot <- ggplot(chart_tibble, 
                           aes(x = charttime, 
                               y = valuenum, 
                               color = abbreviation)) +
  geom_point() +
  geom_line() +
  
  facet_grid(abbreviation ~ stay_id, scales = "free") +
  labs(title = paste("Patient", 
                     chart_tibble$subject_id[1], 
                     "ICU stays - Vitals"),
       x = "",
       y = "") +
  
  theme_light(base_size = 9) + theme(legend.position = "none") +
  guides(x = guide_axis(n.dodge = 2)) 

print(vitals_line_plot)
```
## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

```{r}
icustays_tble <- open_dataset("~/mimic/icu/icustays.csv.gz", 
                                     format = "csv") %>% collect()
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.
```{r}
# Count the number of unique subject_id
num_unique_subjects <- icustays_tble %>%
  distinct(subject_id) %>%
  nrow()

cat("Number of unique subject_id:", num_unique_subjects, "\n")

# Count ICU stays per subject_id
icu_stays_per_subject <- icustays_tble %>%
  group_by(subject_id) %>%
  summarise(num_stays = n())

# Check if a subject_id can have multiple stays
max_stays <- max(icu_stays_per_subject$num_stays)
cat("Maximum ICU stays for a single subject_id:", max_stays, "\n")

# Plot the distribution of ICU stays per subject_id
ggplot(icu_stays_per_subject, aes(x = num_stays)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Distribution of ICU Stays per Subject",
       x = "Number of ICU Stays",
       y = "Count of Subjects") +
  theme_minimal()

```

There are 65366 unique subject_id. A single subject_id can have multiple stays and the maximum ICU stays for a single subject_id is 41.

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

**Solution:**
```{r}
admissions_tble <- open_dataset("~/mimic/hosp/admissions.csv.gz",
  format = "csv") %>% collect()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300. 

**Solution:**
```{r}
# Convert datetime columns to proper format
admissions_tble <- admissions_tble %>%
  mutate(admittime = as.POSIXct(admittime, format="%Y-%m-%d %H:%M:%S"),
         dischtime = as.POSIXct(dischtime, format="%Y-%m-%d %H:%M:%S"))

# 1. Number of Admissions per Patient 
admissions_per_patient <- admissions_tble %>%
  count(subject_id)

# Plot the distribution of admissions per patient
ggplot(admissions_per_patient, aes(x = n)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Number of Admissions per Patient",
       x = "Admissions",
       y = "Number of Patients") +
  theme_minimal()
```
Based on the graph, we see that most of the patients have only 1 admission but some have more than one admissions and there are some extreme cases of over 125 stays. This situation could be explained by most of the patients have been treated well and recovered so that they won't need to go back to the hospital again, but some patients might experienced more serious diseases that cannot be cured within a few hospital visits, or some patients suffered from chronic disease or disease relapsing and would have to be readmitted to the hospital.

```{r}
# 2. Admission Hour Analysis
admissions_tble_admithour <- admissions_tble %>%
  mutate(admittime = with_tz(admittime, "UTC"))

# Plot admission hour distribution
admissions_tble_admithour %>%
  ggplot(aes(x = hour(admittime))) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Admission Hour",
       x = "Admission Hour",
       y = "Frequency") +
  theme_minimal()
```
Based on the graph, we can see that the the number of admissions is peaked at 0 and then drops to around 12000 till a sudden stick-out to almost 25000 at 7, then drops again till a rise appears at 10 again till 18 then remain relatively stable after that. Some unusual things can be observed and explained. The peak number of admission at 0 could be explained by the patients suffer sudden burst of acute diseases when they thought they were alright and relax. That could be the reason why we hear the sound of ambulance relatively frequently at midnight. The sitck-out at 7 could be explained by the reason that people are trying to get themselves treated as early as possible once the hospital opens so that they could avoid the crowds.

```{r}
# 3. Admission Minute Analysis 
admissions_tble <- admissions_tble %>%
  mutate(admission_minute = minute(admittime))

# Plot admission minute distribution
ggplot(admissions_tble, aes(x = admission_minute)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Admission Minute",
       x = "Admission Minute",
       y = "Number of Admissions") +
  theme_minimal()
```
Based on the graph, we can see that while the distribution of the admission minute is mostly normal, there are some unusual stick-outs in frequencies at 0, 16, 30, and 45 minutes. The situation could be explained by some admission minutes have been rounded up or down and they happen to be cumulated at those listed certain minutes.

```{r}
# 4. Length of Hospital Stay
admissions_tble <- admissions_tble %>%
  mutate(length_of_stay_days = as.numeric(difftime(dischtime, admittime, units="days")))

# Plot the distribution of hospital stay length
ggplot(admissions_tble, aes(x = length_of_stay_days)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Hospital Stay Length",
       x = "Length of Stay (Days)",
       y = "Number of Patients") +
  theme_minimal()
```
Based on the graph, the distribution of length of stay is highly right skewed, with most of the patients stay in the hospital for less than 10 days wiht only very few exceptions, which is normal. This could be explain by the fact that most diseases or harm can be cured within a few days and there is no reason for the hospital to keep their patients in while they do not need to be, but some patients might suffer more serious harm that they need longer time of caring at the hospital.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`. **Solution:**

```{r}
patients_tble <- open_dataset(sources = "~/mimic/hosp/patients.csv.gz", 
  format = "csv") %>% dplyr::collect()
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.
Step1: create the patients_tble
```{r}
# Import the CSV file as a tibble
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```
Step 2: create bar charts to summarize gender info
```{r}
# Summary of gender as a bar chart
ggplot(patients_tble, aes(x = gender)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Distribution of Gender", x = "Gender", y = "Count") +
  theme_minimal()
```
According to the bar chart of gender distribution, we can see a relatively balanced number of male and female subjects with slightly more females than males, suggesting that the data is representative across genders without a significant skew.

Step 3: create histogram and boxplot to summarize anchor_age
```{r}
# Summary of anchor_age as a histogram
patients_tble %>% ggplot(aes(x = anchor_age)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Anchor Age",
     x = "Anchor Age",
     y = "Frequency") +
     theme_minimal()
```
According to the histogram, the frequency of anchor_age fluctuates across the ages, first peaks at around 20, then decreases and rises again at around 45 till drops again after 62 years old. A sudden peak appears at around 90. The distribution of data suggests that there different age groups are covered in the dataset. The reason why such distribution pattern occur could be that people at certain age ranges might require more hospital care. For instance, younger populations (around 18) might more likely to suffer from disease because of under developed immune systems and slowly become stronger so that less hospital cares are needed in later time. Once pass 50 years old, the older age populations will need more health carings since the body functions are reducing until they are not willing to go to hospital because of the trouble. A sudden peak in frequency at around 90 years old people might due to the reason that their lives are a criticle point that hospital cares are necessary. 

```{r}
# Summary of anchor_age group by gender as a boxplot
ggplot(patients_tble, aes(x = gender, y = anchor_age, fill = gender)) +
  geom_boxplot() +
  labs(title = "Age Distribution by Gender", x = "Gender", y = "Anchor Age") +
  theme_minimal()
```
According to the boxplot of age distribution by gender, both genders shows similar median anchor ages, with males have slightly older anchor age than females. The IQR range of male is slightly smaller than that of female. This suggests that some differences exist in the age that males or females need hospitabl care, showing that males and females are different in somatic functions and the needs for hosptital cares.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png) Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

**Solution:**
Step 1: Save the icustays.csv.gz, d_labitems.csv.gz (including the lab measurement that we are interested in), and labevents.csv.gz files as tibbles  
```{r}
# define the target items
target_items <- c(50912, 50971, 50983, 50902, 50882, 51221,  51301, 50931)
                  
icustays_tble <- arrow::open_dataset("~/mimic/icu/icustays.csv.gz", 
                                     format = "csv") %>%
  collect() %>%
  print(width = Inf)

dlabitems_tble <- read_csv("~/mimic/hosp/d_labitems.csv.gz", 
                           show_col_types = FALSE) %>%
                              filter(itemid %in% target_items) %>% 
  mutate (itemid = as.integer(itemid)) %>% print(width = Inf)
```
Step 2: Save the labevents.csv.gz file as a tibble and filter the rows with the the items that we are interested in and the patients in icustays_tble
```{r}
labevents_tble <- arrow::open_dataset('labevents_pq',  format = "parquet") %>%
  select(subject_id, itemid, storetime, valuenum) %>%
  filter(itemid %in% target_items) %>%
  filter(subject_id %in% icustays_tble$subject_id) %>%
  collect() %>%
  print(width = Inf)
```
Step 3: Finsh up the rest of the problem
```{r}
# Define the file name for caching
cache_file <- "labevents_tble.rds"

# Check if cached file exists
if (file.exists(cache_file)) {
  labevents_tble <- read_rds(cache_file) %>% print(width = Inf)
} else {
  
  # Load ICU Stay Data
  icustays_tble <- arrow::open_dataset("~/mimic/icu/icustays.csv.gz", 
                                       format = "csv") %>%
    select(subject_id, stay_id, intime) %>% collect() %>%
    mutate(intime = as.POSIXct(intime, format="%Y-%m-%d %H:%M:%S"))

  labevents_data <- arrow::open_dataset("labevents_pq", format = "parquet") %>%
    filter(itemid %in% target_items) %>%
    select(subject_id, itemid, storetime, valuenum)

  # Pre-filter to only ICU patients using Arrow before collecting
  icustay_subjects <- unique(icustays_tble$subject_id)  
  labevents_filtered <- labevents_data %>%
    filter(subject_id %in% icustay_subjects) %>% collect() %>%
    mutate(storetime = as.POSIXct(storetime, format="%Y-%m-%d %H:%M:%S"))

  # Join ICU Stays FIRST to Prevent Many-to-Many
  labevents_joined <- labevents_filtered %>%
    left_join(icustays_tble, by = "subject_id") %>%
    filter(storetime <= intime) %>% 
    group_by(subject_id, stay_id, itemid) %>%
    slice_max(order_by = storetime, n = 1) %>% ungroup() %>%
    select(-storetime, -intime)

  # Convert to Wide Format
  labevents_tble <- labevents_joined %>%
    pivot_wider(names_from = itemid, values_from = valuenum) %>%
    
    # Rename columns to meaningful names
    rename(creatinine = `50912`, 
           potassium = `50971`, 
           sodium = `50983`, 
           chloride = `50902`,
           bicarbonate = `50882`, 
           hematocrit = `51221`, 
           white_blood_cell_count = `51301`, 
           glucose = `50931`)

  write_rds(labevents_tble, cache_file)
  print(labevents_tble, width = Inf)
}
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Solution:**
Step 1: Create the chartevents parquet file
```{r}
#| eval: false
chartevents <- arrow::open_dataset("~/mimic/icu/chartevents.csv", 
                                      format = "csv")
arrow::write_dataset(chartevents, path = "chartevents_pq", format = "parquet")
dataset_parquet <- arrow::open_dataset ("chartevents_pq", format = "parquet")
```
Step 2: Create the d_item tibble
```{r}
d_items_tble <- arrow::open_dataset("~/mimic/icu/d_items.csv.gz", 
                                    format = "csv") %>%
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) %>%
  collect() %>%
  print(width = Inf)
```
Step 3: Define and rename vital items
```{r}
vital_item_ids <- c(220045, 220179, 220180, 223761, 220210) 
vital_items <- setNames(
  c("heart_rate", 
    "systolic_non_invasive_blood_pressure", 
    "diastolic_non_invasive_blood_pressure", 
    "temperature_fahrenheit", 
    "respiratory_rate"),
  vital_item_ids
)
```
Step 4: Load and process data, use storetime instead of charttime as required, and apply the average vital measurements
```{r}
chartevents_data <- open_dataset("chartevents_pq", format = "parquet") %>%
  to_duckdb() %>%
  select(subject_id, itemid, storetime, valuenum) %>%
  filter(itemid %in% vital_item_ids) %>%
  left_join(
    select(icustays_tble, subject_id, stay_id, intime, outtime),
    by = "subject_id", copy = TRUE) %>%
  filter(storetime >= intime & storetime <= outtime) %>%
  group_by(subject_id, stay_id, itemid, storetime) %>%
  
  # Apply average valuenum
  mutate(valuenum = mean(valuenum, na.rm = TRUE)) %>%
  ungroup() %>%
  group_by(subject_id, stay_id, itemid) %>%
  slice_min(order_by = storetime, n = 1) %>%
  select(-storetime, -intime) %>%
  ungroup() %>% pivot_wider(names_from = itemid, values_from = valuenum) %>%
  rename_with(~ recode(., !!!vital_items)) %>%  
  collect()
```
Step 5: Create and print the chartevents_tble
```{r}
chartevents_tble <- chartevents_data %>%
  select(
    subject_id,
    stay_id,
    heart_rate,
    diastolic_non_invasive_blood_pressure, 
    systolic_non_invasive_blood_pressure,
    respiratory_rate,
    temperature_fahrenheit
  ) %>%
  arrange(subject_id, stay_id) %>%
  as_tibble()

print(chartevents_tble)
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png) 

**Solution:**
Step 1: List all the tbles that needed for the question. Since labevents_tble and chartevents_tble are being processed by specific requirements in previous questions, they are not listed here again.
```{r}
icustays_tble <- arrow::open_dataset("~/mimic/icu/icustays.csv.gz",
format = "csv") %>% collect() %>% print(width = Inf)

admissions_tble <- arrow::open_dataset("~/mimic/hosp/admissions.csv.gz",
format = "csv") %>% collect() %>% print(width = Inf)

patients_tble <- arrow::open_dataset("~/mimic/hosp/patients.csv.gz",
format = "csv") %>% collect() %>% print(width = Inf)
```
Step 2: Create the required mimic_icu_cohort tibble
```{r}
mimic_icu_cohort <- icustays_tble %>%
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  left_join(patients_tble, by = "subject_id") %>%
  left_join(labevents_tble, by = c("subject_id", "stay_id")) %>%
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) %>% 
  mutate(age_intime = year(intime) - anchor_year + anchor_age) %>%
  filter(age_intime >= 18)

print(mimic_icu_cohort)
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay

-   Length of ICU stay `los` vs the first vital measurements within the ICU stay

-   Length of ICU stay `los` vs first ICU unit

**Solution:**
(8.1) Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime): 
Step 1: Length of ICU stay los vs race
```{r}
# show summary statistics
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los)) %>%
  group_by(race) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)  
  )


# plot the plot
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(race)) %>%
  ggplot(aes(x = los, y = race)) +
  geom_boxplot(outlier.colour = "black", outlier.shape = 16, outlier.size = 2) +
  labs(title = "Summary of Length of ICU Stay by Race",
       x = "Length of ICU Stay (days)", y = "Race") +
  theme_minimal()
```
Step 2: Length of ICU stay los vs insurance
```{r}
# show summary statistics
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los)) %>%
  group_by(insurance) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)  
  )

# get the plot
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los)) %>%
  ggplot(aes(x = los, y = insurance)) +
  geom_boxplot() +
  labs(title = "Summary of Length of ICU stay by insurance",
       x = "Length of ICU stay in days", y = "Insurance") +
  theme_minimal()
```
Step 3: Length of ICU stay los vs marital_status
```{r}
# show summary statistics:
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(marital_status)) %>%
  group_by(marital_status) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)  
  )

# group by marital_status and plot the plot
mimic_icu_cohort %>% 
  filter(!is.na(los) & is.finite(los) & !is.na(marital_status)) %>%
  group_by(marital_status) %>%
  ggplot(aes(x = los, y = marital_status)) + geom_violin() + geom_point() +
  labs(title = "Summary of Length of ICU stay by Marital Status",
       x = "Length of ICU stay (days)", y = "Marital Status") +  
  theme_minimal()
```
Step 4: Length of ICU stay los vs gender
```{r}
# Remove missing values and compute summary statistics
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(gender)) %>%
  group_by(gender) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)  
  )


# Plot count of ICU stays by gender
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(gender)) %>%
  ggplot(aes(x = gender)) +  
  geom_bar(fill = "steelblue") + 
  labs(title = "Count of ICU Stays by Gender",
       x = "Gender",
       y = "Count") +
  theme_minimal()

# Plot boxplot of LOS by gender
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(gender)) %>%
  ggplot(aes(x = gender, y = los)) +  
  geom_boxplot(fill = "lightblue") +
  labs(title = "Summary of Length of ICU Stay by Gender",
       x = "Gender",
       y = "Length of ICU Stay (days)") +
  theme_minimal()
```
Step 5: Length of ICU stay los vs age at intime
```{r}
# Show summary statistics for LOS grouped by Age at Admission
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(age_intime)) %>%
  group_by(age_intime) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)  
  )

# Plot the plot
mimic_icu_cohort %>%
  filter(!is.na(los) & is.finite(los) & !is.na(age_intime)) %>%
  ggplot(aes(x = age_intime, y = los)) +
  geom_point(alpha = 0.5, color = "steelblue") + 
  labs(title = "Length of ICU Stay by Age at Admission",
       x = "Age at Admission", y = "Length of ICU Stay (days)") +
  theme_minimal()
```

(8.2) Length of ICU stay `los` vs the last available lab measurements before ICU stay
```{r}
# get the variables which will be used to plot
variables <- c("white_blood_cell_count", "heart_rate", 
    "systolic_non_invasive_blood_pressure", 
    "diastolic_non_invasive_blood_pressure", 
    "temperature_fahrenheit", 
    "respiratory_rate", "potassium", "sodium", 
               "chloride", "bicarbonate", "hematocrit", 
               "white_blood_cell_count", "glucose" )


# get the last lab measurements before ICU stay
mimic_icu_cohort_variables <- mimic_icu_cohort %>%
  select(all_of(variables), los) %>%
  filter(if_all(c(all_of(variables), los), ~ !is.na(.))) %>%  
  mutate(across(c(all_of(variables), los), 
                ~ trim(., trim_proportion = 1, na.rm = TRUE)))

plots <- list()

# Drop missing values before plotting
mimic_icu_cohort_filtered <- mimic_icu_cohort %>%
  filter(if_all(all_of(variables), ~ !is.na(.)) & !is.na(los))

# Generate scatter plots for each variable
for (variable in variables) {
  plots[[variable]] <- mimic_icu_cohort_filtered %>%
    ggplot(aes(x = !!sym(variable), y = los)) +  
    geom_point(alpha = 0.5, color = "steelblue") + 
    labs(title = paste("Length of ICU Stay vs", variable),
         x = variable,
         y = "Length of ICU Stay (days)") +
    theme_minimal()
}

print(plots)
```
(8.3) Length of ICU stay los vs the first vital measurements within the ICU stay
```{r}
# get the variables which will be used to plot
variables <- c("heart_rate", "respiratory_rate", "temperature_fahrenheit", 
               "systolic_non_invasive_blood_pressure", 
               "diastolic_non_invasive_blood_pressure")

mimic_icu_cohort_variables <- mimic_icu_cohort %>%
  select(all_of(variables), los) %>%
  filter(if_all(all_of(variables), ~ !is.na(.)) & !is.na(los)) %>%
  mutate(across(c(all_of(variables), los), 
                ~ trim(., trim_proportion = 1, na.rm = TRUE)))

# plot the required plots
plots <- list()

for (variable in variables) {
  plots[[variable]] <- mimic_icu_cohort %>%
    filter(if_all(all_of(c(variable, "los")), ~ !is.na(.))) %>%  
    ggplot(aes(x = !!sym(variable), y = los)) +  
    geom_point(alpha = 0.5, color = "steelblue") +  
    labs(title = paste("Length of ICU Stay vs", variable),
         x = variable,
         y = "Length of ICU Stay (days)") +
    theme_minimal()
}

print(plots)
```
(8.4) Length of ICU stay `los` vs first ICU unit
```{r}
# get summary statistics
mimic_icu_cohort %>%
  filter(!is.na(los) & !is.na(first_careunit)) %>%
  group_by(first_careunit) %>%
  summarise(
    count = n(),
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    min_los = min(los, na.rm = TRUE),
    max_los = max(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE)
  )

# graph bar plot
mimic_icu_cohort %>%
  count(first_careunit) %>%
  ggplot(aes(x = first_careunit, y = n, fill = first_careunit)) +
  geom_bar(width = 1, stat = "identity", color = "white") +
  
  labs(title = "Proportion of ICU Stays by First ICU",
       x = "First ICU",
       y = "Proportion",
       fill = "First ICU") +
  
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```