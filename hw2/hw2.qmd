---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: Zhiyuan Yu 906405523
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

getOption("pkgType")

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(stringr)
```

Display memory information of your computer

```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.) 
**Solution:**
```{r}
# Determine the file path
file_path_1 <- "~/mimic/hosp/admissions.csv.gz"

# Read with read.csv in base R
time_read_csv_base <- system.time({
  df_base <- read.csv(file_path_1)
})

# Read with read_csv in tidyverse 
time_read_csv_tidyverse <- system.time({
  df_tidyverse <- read_csv(file_path_1)
})

# Read with fread in data.table package
time_fread_datatable <- system.time({
  df_datatable <- fread(file_path_1)
})

# Showing and Compare the Data Types
cat("Base R Data Types:\n")
str(df_base)

cat("\nTidyverse Data Types:\n")
str(df_tidyverse)

cat("\nData.table Data Types:\n")
str(df_datatable)

# Memory Usage by each method
memory_base <- object_size(df_base)
memory_tidyverse <- object_size(df_tidyverse)
memory_datatable <- object_size(df_datatable)

# Displaying Results
results <- data.frame(
  Method = c("read.csv (base R)", "read_csv (tidyverse)", "fread (data.table)"),
  Time_in_seconds = c(time_read_csv_base["elapsed"], 
                       time_read_csv_tidyverse["elapsed"], 
                       time_fread_datatable["elapsed"]),
  Memory_Usage_MB = c(as.numeric(memory_base) / (1024^2),
                      as.numeric(memory_tidyverse) / (1024^2),
                      as.numeric(memory_datatable) / (1024^2))
)

print(results)
```
As shown above, fread in the data.table package is the fastest while read.csv in base R is the slowest. The memory taken up by each resultant dataframe or tibble use are also shown above. For default parsed data types, while read_csv and fread are similar except for different naming for numeric data (`int` for fread and `num` for read_csv), read.csv is different in some variablesâ€™ data type such as catigorizing time as chr while the other two methods catigorize as POSIXct.

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.) 
**Solution:**
```{r}
# File path
file_path_2 <- "~/mimic/hosp/admissions.csv.gz"

# Specified column types based on the provided structure
col_types_specified <- cols(
  subject_id = col_double(),
  hadm_id = col_double(),
  admittime = col_datetime(format = ""),
  dischtime = col_datetime(format = ""),
  deathtime = col_datetime(format = ""),
  admission_type = col_character(),
  admit_provider_id = col_character(),
  admission_location = col_character(),
  discharge_location = col_character(),
  insurance = col_character(),
  language = col_character(),
  marital_status = col_character(),
  race = col_character(),
  edregtime = col_datetime(format = ""),
  edouttime = col_datetime(format = ""),
  hospital_expire_flag = col_double()
)

# Measure run time with specified column types
time_with_col_types <- system.time({
  df_col_types <- read_csv(file_path_2, col_types = col_types_specified)
})

# Measure memory usage
memory_col_types <- object_size(df_col_types)

# Displaying Results
results_with_col_types <- data.frame(
  Method = "read_csv (specified col_types)",
  Time_in_seconds = time_with_col_types["elapsed"],
  Memory_Usage_MB = as.numeric(memory_col_types) / (1024^2)
)

print(results_with_col_types)
```
The run time changes. The run time and the memory usage of the result tibble are shown above.

## Q2. Ingest big data files

<p align="center">

<img src="./bigfile.png" width="50%"/>

</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 130x bigger than `admissions.csv.gz`.

```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```

Display the first 10 lines of this file.

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">

<img src="./readr_logo.png" width="20%"/>

</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings.
**Solution:**
```{r}
#| eval: false
# Set a timer to monitor the performance
start_time <- Sys.time()

# Use tryCatch to handle interruptions
result <- tryCatch({
  df_readr <- read_csv("~/mimic/hosp/labevents.csv.gz")
  end_time <- Sys.time()
  
  # Calculate duration
  duration <- as.numeric(difftime(end_time, start_time, units = "secs"))
  
  cat("Ingestion completed in", duration, "seconds.\n")
  cat("Data dimensions:", dim(df_readr), "\n")
  
  return(df_readr)
}, error = function(e) {
  cat("An error occurred:", e$message, "\n")
  return(NULL)
})
```
It took my system more than 3 minutes before it crashed and the process of ingestion did not finish. The reason for this situation was because the file was too large and my laptop does not have enough memory (RAM) to process such large file.

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`. Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)
**Solution:**
```{r}
#| eval: false
# Measure the time for ingestion
start_time <- Sys.time()

# Use tryCatch to handle any potential errors
result <- tryCatch({
  # Ingest only selected columns
  df_selected <- read_csv(
    "~/mimic/hosp/labevents.csv.gz",
    col_select = c(subject_id, charttime, itemid, valuenum)
  )
  
  end_time <- Sys.time()
  
  # Calculate duration
  duration <- as.numeric(difftime(end_time, start_time, units = "secs"))
  
  # Display performance and data information
  cat("Ingestion completed in", duration, "seconds.\n")
  cat("Data dimensions:", dim(df_selected), "\n")
  
  return(df_selected)
}, error = function(e) {
  cat("An error occurred:", e$message, "\n")
  return(NULL)
})
```
My program was forced to terminate again since the file was still to large and my laptop did not have enough RAM to ingest the data.

### Q2.3 Ingest a subset of `labevents.csv.gz`

<p align="center">

<img src="./linux_logo.png" width="20%"/>

</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data. Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)
**Solution:** 
```{bash}
#| eval: false
# Show the headers
zcat ~/mimic/hosp/labevents.csv.gz | head -n 1

# Extract the wanted columns and rows and put them into a new file
zcat < ~/mimic/hosp/labevents.csv.gz |
  awk -F, 'BEGIN {OFS=","; print "subject_id, charttime, itemid, valuenum"}
  NR==1 {next}
  ($5 == 50912 || $5 == 50971 || $5 == 50983 || $5 == 50902 ||
   $5 == 50882 || $5 == 51221 || $5 == 51301 || $5 == 50931) {
    print $2, $5, $7, $10
  }' |
  
gzip > labevents_filtered.csv.gz
```
The file is created

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

**Solution:**
Display the first 10 lines of the new file excluding header:
```{bash}
zcat labevents_filtered.csv.gz | head -n 10
```
Count the lines in the new file:
```{bash}
zcat labevents_filtered.csv.gz | tail -n +2 | wc -l
```
Measure the time it takes `read_csv` to ingest the new file:
```{bash}
time Rscript -e "read.csv('labevents_filtered.csv.gz')" > /dev/null 2>&1
```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">

<img src="./arrow_logo.png" width="30%"/>

</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator.
**Solution:**
Step 1, unzip the labevents.csv.gz file
```{bash}
#| eval: false
gunzip -k ~/mimic/hosp/labevents.csv.gz
```
Step 2, measure the time for ingest + select + filter
```{r}
time_arrow <- system.time({
  dataset <- arrow::open_dataset("~/mimic/hosp/labevents.csv", format = "csv")
  
  result_tibble <- dataset %>%
    select(subject_id, charttime, itemid, valuenum) %>%
    filter(itemid %in% c (50912, 50971, 50983, 50902, 50882, 51221, 
                         51301, 50931)) %>%
    collect()
})

print(time_arrow)
```
Step 3, count the number of rows:
```{r}
cat("Number of Rows:", nrow(result_tibble), "\n")
```
Step 4, show the first 10 rows:
```{r}
print(head(result_tibble, 10))
```
Apache Arrow is a method to move and process large amounts of data within a short time. Imagine you bought a large bag of rice from Costco and tried to pour it into a rice bucket. If you are not strong enough to carry the bag and pour the rice directly, you will need to transfer the rice with a small rice cup little by little to the bucket, which could take a long time. Apache Arrow is like a secret strength booster which lets you move the entire bag of rice at once and pour it into the bucket, saving you a lot of time and trouble. Apache Arrow stores data in a format that different tools and programs can understand instantly, making data analysis quicker more efficient, especially when dealing with big files that require insant amount of computer memory.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">

<img src="./parquet_logo.png" width="30%"/>

</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.
**Solution:**
Step 1, re-write the csv file into binary Parquet format:
```{r}
labevents_data <- arrow::open_dataset("~/mimic/hosp/labevents.csv", format = "csv")

arrow::write_dataset(labevents_data, path = "labevents_parquet", format = "parquet")
```
Step 2, measure the size of the file:
```{bash}
du -sh labevents_parquet
```
Step 3, measure the time for ingest + select + filter
```{r}
time_parquet <- system.time({
  dataset_parquet <- arrow::open_dataset ("labevents_parquet", format = "parquet")

result_tibble_parquet <- dataset_parquet %>%
  select (subject_id, charttime, itemid, valuenum) %>%
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 
                       51301, 50931)) %>%
  arrange(subject_id, charttime) %>%  
  collect()
})

print(time_parquet)
```
Step 4: display the number of rows:
```{r}
cat("Number of Rows:", nrow(result_tibble_parquet), "\n")
```
Step 5, display the first 10 rows:
```{r}
print(head(result_tibble_parquet, 10))
```
Parquet is a method that allow people to efficiently store large datasets. It functions like a higly organized, compressed data package which allow users to process the data within a short time. Itâ€™s a useful tool for processing large amount of data since it saves space and speeds up data processing.

### Q2.6 DuckDB

<p align="center">

<img src="./duckdb_logo.png" width="20%"/>

</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**Solution:**
Step 1, ingest the Parquet file and convert it to a DuckDB table, and measure the time it takes to finish the process:
```{r}
parquet_dir <- "labevents_parquet"

process_time <- system.time({
  # Ingest the Parquet dataset
  dataset_parquet <- arrow::open_dataset(parquet_dir, format = "parquet")
  
  # Convert the Arrow dataset to a DuckDB table
  con <- dbConnect(duckdb::duckdb())
  duckdb_table <- arrow::to_duckdb(dataset_parquet, con = con, table_name = "labevents_table")
  
  # Select and filter data
  result_tibble_duckdb <- duckdb_table %>%
    select(subject_id, charttime, itemid, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 
                         51301, 50931)) %>%
    arrange(subject_id, charttime) %>%  
    collect()
})

cat("\nIngest + Convert + Select + Filter Time:\n")
print(process_time)
```
Step 2, count the number of rows:
```{r}
cat("\nNumber of Rows:", nrow(result_tibble_duckdb), "\n")
```
Step 3, show the first 10 rows: 
```{r}
cat("\nFirst 10 Rows:\n")
print(head(result_tibble_duckdb, 10))

# Close DuckDB connection
dbDisconnect(con, shutdown = TRUE)
```
DuckDB is like a lightning-fast, in-memory database that works directly inside your data tools such as R or Python. Consider it as an advanced version of Excel that can handle millions of rows without needing for a big database server. Itâ€™s great for doing fast data analysis on laptops and this natural of it makes DuckDB a perfect tool for data scientists to work on large datasets.

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patientâ€™s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```

How many rows? 433 millions.

```{bash}
#| eval: true
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```

[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```

In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2.

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.
**Solution:**
Step 1: Unzip the file
```{bash}
#| eval: false
gzip -d -k ~/mimic/icu/chartevents.csv.gz"
```
Step 2: Use arrow::open_dataset to ingest + select + filter the file and show the process time
```{r}
time_arrow <- system.time({
  dataset <- arrow::open_dataset("~/mimic/icu/chartevents.csv", format = "csv")
  
  result_tibble <- dataset %>%
    select(subject_id, charttime, itemid, valuenum) %>%
    filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>%
    collect()
})

print(time_arrow)
```
Step 3: count the number of rows:
```{r}
cat("Number of Rows:", nrow(result_tibble), "\n")
```
Step 4: show the first 10 rows:
```{r}
print(head(result_tibble, 10))
```
