---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 9 @ 11:59PM"
author: Zhiyuan Yu 906405523
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information:

```{r}
sessionInfo()
```

Display my machine memory.

```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:

```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
library(tidyr)
library(dplyr)
library(readr)
library(forcats)
library(ggplot2)
library(shiny) 
library(DT)
library(lubridate)
library(arrow)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble **only at the end of Q1.7**.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** ever add this token to your Git repository. If you do so, you will lose 50 points.

```{r}
# path to the service account token 
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```

Connect to BigQuery database `mimiciv_3_1` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2025-winter`.

```{r}
# connect to the BigQuery database `biostat-203b-2025-mimiciv_3_1`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2025-winter",
    dataset = "mimiciv_3_1",
    billing = "biostat-203b-2025-winter"
)
con_bq
```

List all tables in the `mimiciv_3_1` database.

```{r}
dbListTables(con_bq)
```

### Q1.2 `icustays` data

Connect to the `icustays` table.

```{r}
# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id, stay_id) |>
  # show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.

```{r}
# # TODO
admissions_tble <- tbl(con_bq, "admissions") |>
  arrange(subject_id, hadm_id) |>
  # show_query() |>
  print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.

```{r}
# # TODO
patients_tble <- tbl(con_bq, "patients") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements (by `storetime`) before the ICU stay and pivot lab items to become variables/columns. Write all steps in *one* chain of pipes. **Solution:**

```{r}
labevents_tble <- tbl(con_bq, "labevents") |>
  
  # Select relevant columns
  select(subject_id, itemid, storetime, valuenum) |>
  
  # Join d_labitems table and Filter to include only items of interest
  inner_join(select(tbl(con_bq, "d_labitems") %>%
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221,  51301, 50931)) %>%
  mutate(itemid = as.integer(itemid)), itemid), by = "itemid") |>
  
  # Join icustays table
  left_join(
    select(tbl(con_bq, "icustays") |>
  arrange(subject_id, hadm_id, stay_id), 
  subject_id, stay_id, intime),
    by = c("subject_id"),
    copy = TRUE) |>

  # Keep only lab items before ICU stay
  filter(storetime < intime) |>
  
  # Group by subject_id, stay_id, and itemid
  group_by(subject_id, stay_id, itemid) |>
  
  # Keep only the last lab value before ICU stay
  slice_max(order_by = storetime, n = 1) |>
  
  # Remove unnecessary columns
  select(-storetime, -intime) |>
  
  ungroup() |>
  
  # Pivot wider to reshape data
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  
  # Rename columns using mutate() instead of rename()
  mutate(
    Bicarbonate = `50882`,
    Chloride = `50902`,
    Creatinine = `50912`,
    Glucose = `50931`,
    Potassium = `50971`,
    Sodium = `50983`,
    Hematocrit = `51221`,
    White_Blood_Cells = `51301`
  ) |>
  
  select(-`50882`, -`50902`, -`50912`, -`50931`, -`50971`, -`50983`, -`51221`, 
         -`51301`) |>
  
  # Sort for grading purposes
  arrange(subject_id, stay_id) |>

# Print SQL translation (without computing results)
show_query(labevents_tble) |>
  
print(labevents_tble)
```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events (by `storetime`) during ICU stay and pivot chart events to become variables/columns. Write all steps in *one* chain of pipes. Similary to HW3, if a vital has multiple measurements at the first `storetime`, average them. **Soulution:**

```{r}
chartevents_tble <- tbl(con_bq, "chartevents") |>

  # Select relevant columns
  select(subject_id, stay_id, itemid, storetime, valuenum) |>

  # Filter for selected vital signs
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>

  # Join ICU stays table to get stay_id, intime, outtime
  left_join(
    select(tbl(con_bq, "icustays"), subject_id, stay_id, intime, outtime),
    by = c("subject_id", "stay_id"),
    copy = TRUE
  ) |>

  # Filter data within ICU stay (storetime between intime and outtime)
  filter(storetime >= intime & storetime <= outtime) |>

  # Group by subject_id, stay_id, itemid, storetime to apply the mean
  group_by(subject_id, stay_id, itemid, storetime) |>
  
  # Compute the average vital measurement per storetime
  mutate(valuenum = mean(valuenum, na.rm = TRUE)) |>
  ungroup() |>

  # Group again to get the first recorded vital per subject, stay, item
  group_by(subject_id, stay_id, itemid) |>
  slice_min(order_by = storetime, n = 1) |>
  
  # Remove unneeded columns
  select(-storetime, -intime) |>
  
  ungroup() |>

  # Pivot data wider to reshape by itemid
  pivot_wider(names_from = itemid, values_from = valuenum) |>

  # Rename columns dynamically inside BigQuery
  mutate(
    heart_rate = `220045`,
    systolic_non_invasive_blood_pressure = `220179`,
    diastolic_non_invasive_blood_pressure = `220180`,
    temperature_fahrenheit = `223761`,
    respiratory_rate = `220210`
  ) |>

  # Remove old numeric columns
  select(-`220045`, -`220179`, -`220180`, -`223761`, -`220210`) |>

  # Sort data
  arrange(subject_id, stay_id)

# Print SQL query translation (without computing results)
show_query(chartevents_tble) |>
  print(chartevents_tble)
```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using *one* chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime \>= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble, (vi) sort `subject_id`, `hadm_id`, `stay_id` and `print(width = Inf)`.

```{r}
mimic_icu_cohort <- icustays_tble %>%
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  left_join(patients_tble, by = "subject_id") %>%
  left_join(labevents_tble, by = c("subject_id", "stay_id")) %>%
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) %>% 
  mutate(age_intime = year(intime) - anchor_year + anchor_age) %>%
  filter(age_intime >= 18) %>%
  collect() %>%
print(mimic_icu_cohort, width = Inf)
```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump_n` and `fct_collapse` from the `forcats` package are useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width="95%" height="500" src="./mimic_icu_cohort_gtsummary.html">

</iframe>

**Solution:**\*

```{r}
# Inspect unique levels of the 'race' variable
unique_race_levels <- mimic_icu_cohort %>%
  pull(race) %>%
  unique()

print(unique_race_levels)

mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(race = toupper(trimws(race)))  

mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(
    race = fct_collapse(race,
      ASIAN = c("ASIAN", "ASIAN - ASIAN INDIAN", "ASIAN - SOUTH EAST ASIAN", 
                "ASIAN - CHINESE", "ASIAN - KOREAN"),
      
      BLACK = c("BLACK/AFRICAN", "BLACK/AFRICAN AMERICAN", 
                "BLACK/CARIBBEAN ISLAND", "BLACK/CAPE VERDEAN"),
                
      HISPANIC = c("HISPANIC OR LATINO", "HISPANIC/LATINO - DOMINICAN", 
                   "HISPANIC/LATINO - PUERTO RICAN", 
                   "HISPANIC/LATINO - SALVADORAN", 
                   "HISPANIC/LATINO - CENTRAL AMERICAN", 
                   "HISPANIC/LATINO - GUATEMALAN",
                   "HISPANIC/LATINO - MEXICAN", "HISPANIC/LATINO - HONDURAN",
                   "HISPANIC/LATINO - COLUMBIAN", "HISPANIC/LATINO - CUBAN"),
      WHITE = c("WHITE", "WHITE - OTHER EUROPEAN", "WHITE - BRAZILIAN", 
                "WHITE - RUSSIAN", "WHITE - EASTERN EUROPEAN", "PORTUGUESE"),
                
      Other = c("UNKNOWN", "OTHER", "UNABLE TO OBTAIN", 
                "PATIENT DECLINED TO ANSWER", "AMERICAN INDIAN/ALASKA NATIVE", 
                "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER",
                "SOUTH AMERICAN", "MULTIPLE RACE/ETHNICITY")
    )
  ) %>%
  
  # Lump infrequent levels for specified categorical variables
  mutate(across(c(first_careunit, last_careunit, admission_type, admission_location, discharge_location),
                ~ fct_lump_n(.x, n = 5, other_level = "Other"))) %>%
  
  # Create los_long variable
  mutate(los_long = los >= 2)

# Generate summary table stratified by 'los_long'
summary_table <- mimic_icu_cohort %>%
  select(first_careunit, last_careunit, los, admission_type, admission_location, 
         discharge_location, insurance, language, marital_status, race, 
         hospital_expire_flag, gender, dod, Chloride, Creatinine, Sodium, 
         Potassium, Glucose, Hematocrit, White_Blood_Cells, Bicarbonate,  
         systolic_non_invasive_blood_pressure, 
         diastolic_non_invasive_blood_pressure, respiratory_rate, 
         temperature_fahrenheit, heart_rate, age_intime, los_long) %>%
  tbl_summary(by = los_long)

summary_table %>%
  as_gt()

```

### Q1.9 Save the final tibble

**Solution:** Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.

```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```

Done.

Close database connection and clear workspace.

```{r}
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```

Done.

Although it is not a good practice to add big data files to Git, for grading purpose, please add `mimic_icu_cohort.rds` to your Git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should contain at least two tabs. One tab provides easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort, using the `mimic_icu_cohort.rds` you curated in Q1. The other tab allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3, by dynamically retrieving the patient's ADT and ICU stay information from BigQuery database. Again, do **not** ever add the BigQuery token to your Git repository. If you do so, you will lose 50 points.

**Solution:**
```{r}
# Load ICU cohort data
mimic_icu_cohort <- readRDS("~/203b-hw/hw4/mimiciv_shiny/mimic_icu_cohort.rds")

# Define variable groups
variable_groups <- list(
  "Demographics" = c("age_intime", "gender", "race", "insurance", 
                     "marital_status"),
  "Lab Measurements" = c("Creatinine", "Sodium", "Potassium", "Glucose", 
                         "Hematocrit", "White_Blood_Cells", "Bicarbonate"),
  "Vitals" = c("heart_rate", "systolic_non_invasive_blood_pressure", 
               "diastolic_non_invasive_blood_pressure", "respiratory_rate", 
               "temperature_fahrenheit")
)

# Connect to BigQuery
satoken <- "biostat-203b-2025-winter-4e58ec6e5579.json"
bq_auth(path = satoken)

con_bq <- dbConnect(
  bigrquery::bigquery(),
  project = "biostat-203b-2025-winter",
  dataset = "mimiciv_3_1",
  billing = "biostat-203b-2025-winter"
)

## Process & Save Patient Demographics
## Process & Save Patient Demographics 
demographics_data <- tbl(con_bq, "patients") %>%
  select(subject_id, gender, anchor_age) %>%
  left_join(
    tbl(con_bq, "admissions") %>% select(subject_id, race),
    by = "subject_id"
  ) %>%
  distinct(subject_id, .keep_all = TRUE) %>%  # Ensure one row per patient
  collect()
saveRDS(demographics_data, "demographics_data.rds")

## Process & Save Top 3 Diagnoses
## Process & Save Top 3 Diagnoses (Now using HW3 filtering method)
diagnoses_data <- tbl(con_bq, "diagnoses_icd") %>%
  left_join(tbl(con_bq, "d_icd_diagnoses"), by = c("icd_code", "icd_version")) %>%
  collect() %>%  # Collect everything first before filtering
  group_by(subject_id, long_title) %>%
  summarise(freq = n(), .groups = "drop") %>%  # Count occurrences
  arrange(desc(freq)) %>%  
  group_by(subject_id) %>%
  slice(1:3)  # Take the top 3 diagnoses per subject

saveRDS(diagnoses_data, "diagnoses_data.rds")

## Process & Save ADT Data
adt_data <- tbl(con_bq, "transfers") %>%
  select(subject_id, intime, outtime, careunit) %>%
  collect() %>%
  mutate(intime = as.POSIXct(intime, format = "%Y-%m-%d %H:%M:%S"),
         outtime = as.POSIXct(outtime, format = "%Y-%m-%d %H:%M:%S"))
saveRDS(adt_data, "adt_data.rds")

## Process & Save Lab Events
labevents_data <- tbl(con_bq, "labevents") %>%
  select(subject_id, charttime) %>%
  distinct() %>%
  collect() %>%
  mutate(charttime = as.POSIXct(charttime, format = "%Y-%m-%d %H:%M:%S"))
saveRDS(labevents_data, "labevents_data.rds")

# Define UI
ui <- fluidPage(
  titlePanel("ICU Cohort Data"),
  tabsetPanel(id = "tabselected",
              tabPanel("Summary", fluidPage(
                sidebarLayout(
                  sidebarPanel(
                    selectInput("var_group", "Variable Group:", 
                                choices = names(variable_groups),
                                selected = "Demographics"),
                    
                    selectInput("var_select", "Variable:", 
                                choices = variable_groups[[1]]), 
                    
                    uiOutput("slider_ui")  # Dynamic slider for age & lab measurements
                  ),
                  mainPanel(
                    plotOutput("graph_plot"),  
                    DTOutput("num_summary"),   
                    h3("Missing Values Summary"),  
                    verbatimTextOutput("na_summary") 
                  )
                )
              )),
              
              tabPanel("Patient Info", fluidPage(
                sidebarLayout(
                  sidebarPanel(
                    textInput("subject_id", "Subject ID", ""),
                    actionButton("submit", "Submit"),
                    selectInput("plot_type", "Select a plot:", choices = c("ADT", "ICU"))
                  ),
                  mainPanel(
                    plotOutput("patient_plot")
                  )
                )
              ))
  )
)

# Define Server
server <- function(input, output, session) {
  
  observeEvent(input$var_group, {
    updateSelectInput(session, "var_select",
                      choices = variable_groups[[input$var_group]],
                      selected = variable_groups[[input$var_group]][1])
  })
  
  # Render slider input for `age_intime` and lab measurements
  output$slider_ui <- renderUI({
    if (input$var_select %in% c("age_intime", variable_groups[["Lab Measurements"]])) {
      sliderInput("value_range", paste("Select Range for", input$var_select, ":"),
                  min = min(mimic_icu_cohort[[input$var_select]], na.rm = TRUE),
                  max = max(mimic_icu_cohort[[input$var_select]], na.rm = TRUE),
                  value = c(min(mimic_icu_cohort[[input$var_select]], na.rm = TRUE), 
                            max(mimic_icu_cohort[[input$var_select]], na.rm = TRUE)))
    }
  })
  
  # Generate graphical summaries
  output$graph_plot <- renderPlot({
    req(input$var_select)
    
    if (is.numeric(mimic_icu_cohort[[input$var_select]])) {
      ggplot(mimic_icu_cohort, aes(x = !!sym(input$var_select))) +
        geom_histogram(bins = 30, fill = "skyblue", alpha = 0.7) +
        labs(title = paste("Distribution of", input$var_select),
             x = input$var_select, y = "Count") +
        theme_minimal()
    } else {
      ggplot(mimic_icu_cohort, aes(x = !!sym(input$var_select), fill = !!sym(input$var_select))) +
        geom_bar() +
        labs(title = paste("Bar Plot of", input$var_select),
             x = input$var_select, y = "Count") +
        theme_minimal() +
        coord_flip()
    }
  })
  
  # Generate numerical summaries as a DataTable
  output$num_summary <- renderDT({
    req(input$var_select)
    
    if (is.numeric(mimic_icu_cohort[[input$var_select]])) {
      summary_df <- data.frame(
        Statistic = names(summary(mimic_icu_cohort[[input$var_select]])),
        Value = as.vector(summary(mimic_icu_cohort[[input$var_select]]))
      )
    } else {
      summary_df <- mimic_icu_cohort %>%
        count(!!sym(input$var_select)) %>%
        arrange(desc(n))
      colnames(summary_df) <- c("Category", "Count")
    }
    
    datatable(summary_df, options = list(pageLength = 10, scrollX = TRUE, searching = FALSE))
  })
  
  # Display Missing Values Summary
  output$na_summary <- renderPrint({
    req(input$var_select)
    
    na_count <- sum(is.na(mimic_icu_cohort[[input$var_select]]))
    total_values <- nrow(mimic_icu_cohort)
    missing_percentage <- (na_count / total_values) * 100
    
    paste0("Missing values (NAs): ", na_count, " out of ", total_values,
           " (", round(missing_percentage, 2), "%)")
  })
  
  observeEvent(input$submit, {
    req(input$subject_id)
    subject_id <- as.numeric(input$subject_id)
    
    output$error_message <- renderText({ "" })  # Clear error message

    # Load Pre-Processed Data
    demographics_data <- readRDS("demographics_data.rds")
    diagnoses_data <- readRDS("diagnoses_data.rds")
    adt_data <- readRDS("adt_data.rds")
    labevents_data <- readRDS("labevents_data.rds")

    # Get Patient Data
    patient_demographics <- demographics_data %>%
      filter(subject_id == !!subject_id)
    
    patient_diagnoses <- diagnoses_data %>%
      filter(subject_id == !!subject_id) %>%
      pull(long_title)

    patient_adt <- adt_data %>%
      filter(subject_id == !!subject_id)

    patient_labevents <- labevents_data %>%
      filter(subject_id == !!subject_id)

    patient_procedures <- tbl(con_bq, "procedures_icd") %>%
        filter(subject_id == !!subject_id) %>%
        left_join(tbl(con_bq, "d_icd_procedures"), 
                  by = c("icd_code" = "icd_code", "icd_version" = "icd_version")) %>%
        collect() %>%
        mutate(chartdate = as.POSIXct(chartdate, format = "%Y-%m-%d"))
    
    # Construct Demographic Title & Diagnoses Subtitle
    patient_title <- paste("Patient", patient_demographics$subject_id[1], ", ",
                           patient_demographics$gender[1], ", ",
                           patient_demographics$anchor_age[1], "years old, ",
                           patient_demographics$race[1])

    patient_subtitle <- paste(patient_diagnoses[1], patient_diagnoses[2], patient_diagnoses[3], sep = "\n")
    
    # Render Plot
    output$patient_plot <- renderPlot({
      ggplot() +
        geom_segment(data = patient_adt,
                     aes(x = intime, xend = outtime, y = "ADT", yend = "ADT", color = careunit),
                     size = 4) +
        geom_point(data = patient_labevents,
                   aes(x = charttime, y = "Lab"),
                   shape = 3, size = 2, color = "black") +
        geom_point(data = patient_procedures,
                   aes(x = chartdate, y = "Procedure", shape = sub(",.*", "", long_title)),
                   size = 3, color = "black") +
        scale_x_datetime(name = "Calendar Time") +
        scale_y_discrete(name = NULL, limits = c("Procedure", "Lab", "ADT")) +
        theme_bw() +
        labs(title = patient_title, subtitle = patient_subtitle, x = "Time", y = "")
    })
  })
}


# Run the application
shinyApp(ui = ui, server = server)
```

